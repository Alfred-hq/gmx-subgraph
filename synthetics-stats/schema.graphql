enum OrderStatus {
  Created
  Executed
  Cancelled
  Frozen
}

enum TradeActionType {
  OrderCreated
  OrderCancelled
  OrderExecuted
  OrderFrozen
  OrderUpdated
}

enum ClaimCollateralActionType {
  ClaimPriceImpact
  ClaimFunding
}

type Order @entity {
  # orderKey
  id: ID!

  account: String!
  receiver: String!
  callbackContract: String!
  marketAddress: String!
  swapPath: [String!]
  initialCollateralTokenAddress: String!

  sizeDeltaUsd: BigInt!
  initialCollateralDeltaAmount: BigInt!
  triggerPrice: BigInt!
  acceptablePrice: BigInt!
  executionFee: BigInt!
  callbackGasLimit: BigInt!
  minOutputAmount: BigInt!

  updatedAtBlock: BigInt!

  orderType: BigInt!

  shouldUnwrapNativeToken: Boolean!
  isLong: Boolean!

  status: OrderStatus!

  cancelledReason: String
  cancelledReasonBytes: Bytes
  frozenReason: String
  frozenReasonBytes: Bytes

  createdTxn: Transaction!
  cancelledTxn: Transaction
  executedTxn: Transaction
}

type PositionIncrease @entity {
  # orderKey
  id: ID!
  orderKey: String!
  positionKey: String!
  account: String!
  marketAddress: String!
  collateralTokenAddress: String!
  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  executionPrice: BigInt!
  priceImpactDiffUsd: BigInt!
  orderType: BigInt!
  borrowingFactor: BigInt!
  longTokenFundingAmountPerSize: BigInt!
  shortTokenFundingAmountPerSize: BigInt!
  priceImpactAmount: BigInt!
  pnlUsd: BigInt!
  isLong: Boolean!

  transaction: Transaction
}

type PositionDecrease @entity {
  # orderKey
  id: ID!
  orderKey: String!
  positionKey: String!
  account: String!
  marketAddress: String!
  collateralTokenAddress: String!
  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  executionPrice: BigInt!
  priceImpactDiffUsd: BigInt!
  orderType: BigInt!
  borrowingFactor: BigInt!
  longTokenFundingAmountPerSize: BigInt!
  shortTokenFundingAmountPerSize: BigInt!
  priceImpactAmount: BigInt!
  pnlUsd: BigInt!
  isLong: Boolean!

  transaction: Transaction
}

type PositionFeesInfo @entity {
  # orderKey
  id: ID!
  orderKey: String!
  marketAddress: String!
  collateralTokenAddress: String!

  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!

  positionFeeAmount: BigInt!
  borrowingFeeAmount: BigInt!
  fundingFeeAmount: BigInt!
  feeAmountForPool: BigInt!

  transaction: Transaction!
}

type SwapInfo @entity {
  # orderKey:marketAddress
  id: ID!
  orderKey: String!
  receiver: String!
  marketAddress: String!
  tokenInAddress: String!
  tokenOutAddress: String!
  tokenInPrice: BigInt!
  tokenOutPrice: BigInt!
  amountIn: BigInt!
  amountInAfterFees: BigInt!
  amountOut: BigInt!
  priceImpactUsd: BigInt!

  transaction: Transaction!
}

type TradeAction @entity {
  id: ID!
  eventName: String!

  orderKey: String!
  orderType: BigInt!

  account: String!
  marketAddress: String
  swapPath: [String!]
  initialCollateralTokenAddress: String!
  initialCollateralDeltaAmount: BigInt!

  # positions
  sizeDeltaUsd: BigInt
  triggerPrice: BigInt
  acceptablePrice: BigInt
  executionPrice: BigInt
  collateralTokenPriceMin: BigInt
  collateralTokenPriceMax: BigInt
  priceImpactDiffUsd: BigInt
  priceImpactAmount: BigInt
  positionFeeAmount: BigInt
  borrowingFeeAmount: BigInt
  fundingFeeAmount: BigInt
  pnlUsd: BigInt
  isLong: Boolean

  # swaps
  minOutputAmount: BigInt
  executionAmountOut: BigInt
  shouldUnwrapNativeToken: Boolean

  reason: String
  reasonBytes: Bytes

  transaction: Transaction!
}

type ClaimCollateralAction @entity {
  # transactionHash:account:eventName
  id: ID!
  eventName: ClaimCollateralActionType!
  account: String!
  marketAddresses: [String!]!
  tokenAddresses: [String!]!
  amounts: [BigInt!]!

  transaction: Transaction!
}

type CollectedPositionFee @entity {
  # marketAddress:collateralAddress:period:timestampGroup
  id: ID!
  period: String!
  marketAddress: String!
  collateralTokenAddress: String!
  timestampGroup: Int!
  feeAmountForPool: BigInt!
  feeUsdForPool: BigInt!
}

type Transaction @entity {
  id: ID!
  from: String!
  to: String!
  hash: String!
  timestamp: Int!
  blockNumber: Int!
  transactionIndex: Int!
}
